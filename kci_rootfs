#!/usr/bin/env python
#
# Copyright (C) 2019 Collabora Limited
# Author: Michal Galka <michal.galka@collabora.com>
#
# This module is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import sys

from kernelci.cli import Args, Command
import kernelci.config.rootfs

# -----------------------------------------------------------------------------
# Commands
#


class cmd_validate(Command):
    help = "Lists all rootfs configs"

    def __call__(self, config_data, *args, **kwargs):
        rootfs_configs = config_data['rootfs_configs']
        print(rootfs_configs)
        for config_name, config in rootfs_configs.items():
            print('\trootfs_type: {}'.format(config.rootfs_type))
            print('\tarch_list: {}'.format(config.arch_list))
            print('\tdebian_release: {}'.format(config.debian_release))
            print('\textra_packages: {}'.format(config.extra_packages))
            print('\textra_packages_remove: {}'
                  .format(config.extra_packages_remove))
            print('\textra_files_remove: {}'.format(config.extra_files_remove))
            print('\tscript: {}'.format(config.script))
            print('\tdocker_image: {}'.format(config.docker_image))


# -----------------------------------------------------------------------------
# Main
#

if __name__ == '__main__':
    parser = argparse.ArgumentParser("kci_rootfs")
    parser.add_argument("--yaml-rootfs-configs", default="rootfs-configs.yaml",
                        help="Path to the YAML rootfs configs file")
    kernelci.cli.add_subparser(parser, globals())
    args = parser.parse_args()
    rootfs_configs = kernelci.config.rootfs.from_yaml(args.yaml_rootfs_configs)
    status = args.func(rootfs_configs, args)
    sys.exit(0 if status is True else 1)
